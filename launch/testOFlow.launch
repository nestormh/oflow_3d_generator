<launch>
    <arg name="namespace" default="testOflow"/>
    <param name="use_sim_time" value="true"/>

    <node pkg="tf" type="static_transform_publisher" name="map2odom" args="0 0 0 0 0 0 map odom 100" />
    <node pkg="tf" type="static_transform_publisher" name="basefootprint2baselink" args="0 0 0 -1.57 0 0 base_footprint base_link 100" />
    <node pkg="tf" type="static_transform_publisher" name="baselink2baseleftcam" args="0.27 0 1.45 0 0 -1.57079632679489661923 base_link base_left_cam 100" />

    <node pkg="viso2_ros" type="stereo_odometer" name="stereo_odometer" output="screen">
        <remap from="stereo" to="$(arg namespace)/stereo_and_odom"/>
        <param name="base_link_frame_id" value="base_footprint" />
        <param name="odom_frame_id" value="odom" />
    </node>
   
<group ns="$(arg namespace)">
    <node name="stereo_and_odom" pkg="PolarGridTracking" type="stereo_and_odom" output="screen" required="true" >
    </node> 
    <node pkg="grull_elas_ros" type="elas_ros" name="elas_ros" output="screen" required="true">
        <remap from="stereo" to="stereo_and_odom" />
        <remap from="stereo_and_odom/left/$(arg namespace)/image" to="stereo_and_odom/left/image" />
        <remap from="stereo_and_odom/right/$(arg namespace)/image" to="stereo_and_odom/right/image" />
        
        <param name="approximate_sync" value="true" />
        
        <remap from="base_frame_id" to="left_cam" />
        <param name="base_frame_id" value="left_cam" />
        <param name="pose_frame_id" value="base_link" />
    </node>
    
    <node pkg="oflow_3d_generator" type="oflow_3d_generator" name="oflow_3d_generator" output="screen" required="true">
        <remap from="stereo" to="stereo_and_odom" />
        <remap from="stereo_and_odom/left/$(arg namespace)/image" to="stereo_and_odom/left/image" />
        <remap from="stereo_and_odom/disparity/$(arg namespace)/image" to="elas_ros/disparity" />
        
        <param name="approximate_sync" value="true" />
        
        <remap from="base_frame_id" to="left_cam" />
        <param name="base_frame_id" value="left_cam" />
        <param name="pose_frame_id" value="base_link" />
    </node>
   
</group>

<group ns="filters">
    <!-- PCL Manager -->
     <node pkg="nodelet" type="nodelet" name="box_filter_manager" args="manager" output="screen"/>
     
     <!-- Run a passthrough filter to delimit in x direction -->
     <!--<node pkg="nodelet" type="nodelet" name="psx" args="load pcl/PassThrough box_filter_manager" output="screen">
        <remap from="~input" to="/$(arg namespace)/elas_ros/point_cloud" />
        <rosparam>
            filter_field_name: x
            filter_limit_min: -4.0
            filter_limit_max: 4.0
        </rosparam>
    </node>-->

    <!-- Run a passthrough filter to delimit in y direction -->
    <!--<node pkg="nodelet" type="nodelet" name="psy" args="load pcl/PassThrough box_filter_manager" output="screen">
        <remap from="~input" to="psx/output" />
        <rosparam>
            filter_field_name: y
            filter_limit_min: 0.0
            filter_limit_max: 24.0
        </rosparam>
    </node>-->

    <!-- Run a passthrough filter to delimit in z direction -->
    <!--<node pkg="nodelet" type="nodelet" name="psz" args="load pcl/PassThrough box_filter_manager" output="screen">
        <remap from="~input" to="psy/output" />
        <remap from="~output" to="/$(arg namespace)/pointCloudFiltered" />
        <rosparam>
            filter_field_name: z
            filter_limit_min: -0.1
            filter_limit_max: 13.5
        </rosparam>
    </node>-->
    
<!--     <node pkg="nodelet" type="nodelet" name="EXAMPLE_MANAGER" args="manager"/> -->
    
    <include file="$(find grull_transform_pointcloud)/launch/launch.launch">
        <arg name="input_topic"     value="/$(arg namespace)/elas_ros/point_cloud" />
<!--         <arg name="input_topic"     value="/$(arg namespace)/pointCloudFiltered"/> -->
        <arg name="output_topic"    value="/$(arg namespace)/pointCloudFilteredAndTransformed"/>
        <arg name="target_frame"    value="base_footprint"/>
        <arg name="nodelet_manager" value="box_filter_manager"/>
    </include>
    
    <node pkg="nodelet" type="nodelet" name="heightmap_nodelet"
        args="load velodyne_height_map/HeightMapNodelet box_filter_manager">
            <param name="cell_size" value="0.1"/>
            <param name="full_clouds" value="true"/>
            
            <remap from="velodyne_points" to="/$(arg namespace)/pointCloudFilteredAndTransformed"/>
            <remap from="velodyne_obstacles" to="/$(arg namespace)/obstaclesPointCloud"/>
    </node>
</group>

<group ns="viewers">
    <node pkg="image_view" type="image_view" name="dbg_input_img" output="screen" required="false">
        <remap from="image" to="/$(arg namespace)/dbg/input_img"/>
    </node>
    <node pkg="image_view" type="image_view" name="dbg_depth_img" output="screen" required="false">
        <remap from="image" to="/$(arg namespace)/dbg/depth_img"/>
    </node>
    <node pkg="image_view" type="image_view" name="dbg_others_img" output="screen" required="false">
        <remap from="image" to="/$(arg namespace)/dbg/others_img"/>
    </node>
</group>
<!-- <node pkg="rviz" type="rviz" name="rviz" required="false"  args="&#45;&#45;display-config  -->
<node launch-prefix="optirun" pkg="rviz" type="rviz" name="rviz" required="false"  args="&#45;&#45;display-config 
    $(find oflow_3d_generator)/config/testOFlow.rviz"/>
<!--<node pkg="rosbag" type="record"  name="rosbag"
    args="-o /tmp/2011_09_26_drive_0091_sync_" />-->
    
</launch>
